/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package id.co.danamon.schema;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AlertNotification extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -466040339537013555L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AlertNotification\",\"namespace\":\"id.co.danamon.schema\",\"fields\":[{\"name\":\"source\",\"type\":[\"null\",\"string\"]},{\"name\":\"message\",\"type\":[\"null\",\"string\"]},{\"name\":\"severity\",\"type\":[\"null\",\"string\"]},{\"name\":\"timestamp\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence source;
  @Deprecated public java.lang.CharSequence message;
  @Deprecated public java.lang.CharSequence severity;
  @Deprecated public java.lang.CharSequence timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AlertNotification() {}

  /**
   * All-args constructor.
   * @param source The new value for source
   * @param message The new value for message
   * @param severity The new value for severity
   * @param timestamp The new value for timestamp
   */
  public AlertNotification(java.lang.CharSequence source, java.lang.CharSequence message, java.lang.CharSequence severity, java.lang.CharSequence timestamp) {
    this.source = source;
    this.message = message;
    this.severity = severity;
    this.timestamp = timestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return source;
    case 1: return message;
    case 2: return severity;
    case 3: return timestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: source = (java.lang.CharSequence)value$; break;
    case 1: message = (java.lang.CharSequence)value$; break;
    case 2: severity = (java.lang.CharSequence)value$; break;
    case 3: timestamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'message' field.
   * @return The value of the 'message' field.
   */
  public java.lang.CharSequence getMessage() {
    return message;
  }

  /**
   * Sets the value of the 'message' field.
   * @param value the value to set.
   */
  public void setMessage(java.lang.CharSequence value) {
    this.message = value;
  }

  /**
   * Gets the value of the 'severity' field.
   * @return The value of the 'severity' field.
   */
  public java.lang.CharSequence getSeverity() {
    return severity;
  }

  /**
   * Sets the value of the 'severity' field.
   * @param value the value to set.
   */
  public void setSeverity(java.lang.CharSequence value) {
    this.severity = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Creates a new AlertNotification RecordBuilder.
   * @return A new AlertNotification RecordBuilder
   */
  public static id.co.danamon.schema.AlertNotification.Builder newBuilder() {
    return new id.co.danamon.schema.AlertNotification.Builder();
  }

  /**
   * Creates a new AlertNotification RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AlertNotification RecordBuilder
   */
  public static id.co.danamon.schema.AlertNotification.Builder newBuilder(id.co.danamon.schema.AlertNotification.Builder other) {
    return new id.co.danamon.schema.AlertNotification.Builder(other);
  }

  /**
   * Creates a new AlertNotification RecordBuilder by copying an existing AlertNotification instance.
   * @param other The existing instance to copy.
   * @return A new AlertNotification RecordBuilder
   */
  public static id.co.danamon.schema.AlertNotification.Builder newBuilder(id.co.danamon.schema.AlertNotification other) {
    return new id.co.danamon.schema.AlertNotification.Builder(other);
  }

  /**
   * RecordBuilder for AlertNotification instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AlertNotification>
    implements org.apache.avro.data.RecordBuilder<AlertNotification> {

    private java.lang.CharSequence source;
    private java.lang.CharSequence message;
    private java.lang.CharSequence severity;
    private java.lang.CharSequence timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(id.co.danamon.schema.AlertNotification.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.source)) {
        this.source = data().deepCopy(fields()[0].schema(), other.source);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.severity)) {
        this.severity = data().deepCopy(fields()[2].schema(), other.severity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AlertNotification instance
     * @param other The existing instance to copy.
     */
    private Builder(id.co.danamon.schema.AlertNotification other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.source)) {
        this.source = data().deepCopy(fields()[0].schema(), other.source);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.message)) {
        this.message = data().deepCopy(fields()[1].schema(), other.message);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.severity)) {
        this.severity = data().deepCopy(fields()[2].schema(), other.severity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }

    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public id.co.danamon.schema.AlertNotification.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.source = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public id.co.danamon.schema.AlertNotification.Builder clearSource() {
      source = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'message' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessage() {
      return message;
    }

    /**
      * Sets the value of the 'message' field.
      * @param value The value of 'message'.
      * @return This builder.
      */
    public id.co.danamon.schema.AlertNotification.Builder setMessage(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.message = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'message' field has been set.
      * @return True if the 'message' field has been set, false otherwise.
      */
    public boolean hasMessage() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'message' field.
      * @return This builder.
      */
    public id.co.danamon.schema.AlertNotification.Builder clearMessage() {
      message = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'severity' field.
      * @return The value.
      */
    public java.lang.CharSequence getSeverity() {
      return severity;
    }

    /**
      * Sets the value of the 'severity' field.
      * @param value The value of 'severity'.
      * @return This builder.
      */
    public id.co.danamon.schema.AlertNotification.Builder setSeverity(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.severity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'severity' field has been set.
      * @return True if the 'severity' field has been set, false otherwise.
      */
    public boolean hasSeverity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'severity' field.
      * @return This builder.
      */
    public id.co.danamon.schema.AlertNotification.Builder clearSeverity() {
      severity = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public id.co.danamon.schema.AlertNotification.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public id.co.danamon.schema.AlertNotification.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public AlertNotification build() {
      try {
        AlertNotification record = new AlertNotification();
        record.source = fieldSetFlags()[0] ? this.source : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.message = fieldSetFlags()[1] ? this.message : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.severity = fieldSetFlags()[2] ? this.severity : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
